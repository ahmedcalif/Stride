<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - Stride</title>
    <link rel="stylesheet" href="~/lib/bootstrap/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/lib/font-awesome/css/all.min.css" />
    <link rel="stylesheet" href="~/css/site.css" />
    @await RenderSectionAsync("Styles", required: false)
</head>
<body>
<div class="py-4 d-flex justify-content-center">
    <nav class="bg-white px-4 py-3 rounded-4 shadow-sm">
      <ul class="nav gap-5">
        <li class="nav-item">
          <a href="/Dashboard" class="nav-link text-primary fs-5">Dashboard</a>
        </li>
        <li class="nav-item">
          <a href="/Goals" class="nav-link text-secondary fs-5">Goals</a>
        </li>
        <li class="nav-item">
          <a href="/Habits" class="nav-link text-secondary fs-5">Habits</a>
        </li>
        @if (User.IsInRole("Admin") || User.HasClaim(c => c.Type == "ActiveRole" && c.Value == "Admin"))
        {
          <li class="nav-item">
            <a href="/Admin/Users" class="nav-link text-secondary fs-5">Users</a>
          </li>
        }
        <li class="nav-item">
          <a href="/Settings" class="nav-link text-secondary fs-5 d-flex align-items-center justify-content-center">Settings</a>
        </li>
      </ul>
    </nav>
  </div> 
  <main class="flex-grow-1 p-3">
    <div id="apprun-app">
      @RenderBody()
    </div>
  </main>

  <script src="~/lib/bootstrap/js/bootstrap.bundle.min.js"></script>
  <script src="~/lib/jquery/jquery.min.js"></script>
 <script src="https://unpkg.com/apprun@latest/dist/apprun.js"></script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const appContainer = document.getElementById("apprun-app");

        document.body.addEventListener("click", event => {
          const link = event.target.closest("a.spa-link");
          if (!link) return;
          event.preventDefault();

          const url = link.getAttribute("href");
          if (!url) return;

          history.pushState(null, "", url);
          fetchContent(url);
        });

        window.addEventListener("popstate", () => {
          fetchContent(window.location.pathname);
        });

        async function fetchContent(url) {
          try {
            const response = await fetch(url, {
              headers: { "X-Requested-With": "XMLHttpRequest" }
            });
            const html = await response.text();
            appContainer.innerHTML = html;
            
            const scripts = appContainer.querySelectorAll("script");
            scripts.forEach(oldScript => {
              const newScript = document.createElement("script");
              if (oldScript.src) {
                newScript.src = oldScript.src;
              } else {
                newScript.textContent = oldScript.textContent;
              }
              document.head.appendChild(newScript);
              document.head.removeChild(newScript);
            });
          } catch (error) {
            console.error("Error loading content:", error);
            window.location.href = url;
          }
        }
      });
    </script>
    @await RenderSectionAsync("Scripts", required: false) 
</body>
</html>